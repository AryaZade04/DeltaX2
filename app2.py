# -*- coding: utf-8 -*-
"""app2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lShesikaSUymWq-sn9jljYDfsqA97_D7
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

# ===============================
# Generate Synthetic Dataset
# ===============================
np.random.seed(42)
n_samples = 500

data = pd.DataFrame({
    "User_ID": range(1, n_samples + 1),
    "Age": np.random.randint(18, 55, n_samples),
    "Monthly_Income": np.random.randint(20000, 120000, n_samples),
    "Ad_Clicks": np.random.randint(1, 50, n_samples),
    "Ad_Spend": np.random.randint(500, 5000, n_samples),
    "Platform": np.random.choice(["Google", "Meta", "LinkedIn"], n_samples),
    "Interest": np.random.choice(["Tech", "Fashion", "Sports", "Finance"], n_samples)
})

# ===============================
# Preprocessing
# ===============================
df = data.copy()
df_encoded = pd.get_dummies(df[["Platform", "Interest"]], drop_first=True)
features = pd.concat([df[["Age", "Monthly_Income", "Ad_Clicks", "Ad_Spend"]], df_encoded], axis=1)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(features)

# ===============================
# Clustering with KMeans
# ===============================
kmeans = KMeans(n_clusters=4, random_state=42, n_init=10)
df["Segment"] = kmeans.fit_predict(X_scaled)

# PCA for visualization
pca = PCA(n_components=2)
pca_result = pca.fit_transform(X_scaled)
df["PCA1"] = pca_result[:, 0]
df["PCA2"] = pca_result[:, 1]

# ===============================
# Streamlit App
# ===============================
st.set_page_config(page_title="Customer Segmentation Dashboard", layout="wide")
st.title("ðŸ“Š Customer Segmentation for Targeted Ads")

# Sidebar filters
st.sidebar.header("Filters")
platform = st.sidebar.multiselect("Select Platform", df["Platform"].unique(), default=df["Platform"].unique())
interest = st.sidebar.multiselect("Select Interest", df["Interest"].unique(), default=df["Interest"].unique())

filtered_df = df[(df["Platform"].isin(platform)) & (df["Interest"].isin(interest))]

# Show dataset
st.subheader("Segmented User Data (sample)")
st.dataframe(filtered_df.head(10))

# Cluster distribution
st.subheader("Cluster Distribution")
fig1 = px.histogram(filtered_df, x="Segment", color="Segment", title="User Segments Distribution")
st.plotly_chart(fig1, use_container_width=True)

# PCA scatter plot
st.subheader("2D Cluster Visualization")
fig2 = px.scatter(
    filtered_df, x="PCA1", y="PCA2", color="Segment",
    hover_data=["Age", "Monthly_Income", "Ad_Clicks", "Ad_Spend", "Platform", "Interest"]
)
st.plotly_chart(fig2, use_container_width=True)

# Segment Insights
st.subheader("Segment Insights")
st.write(filtered_df.groupby("Segment")[["Age", "Monthly_Income", "Ad_Clicks", "Ad_Spend"]].mean())

